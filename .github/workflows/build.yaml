name: Checkov and SonarCloud Scan

on:
  push:
    branches: [master]
  pull_request:

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout del repositorio
      - name: üì• Checkout Repository
        uses: actions/checkout@v2

      # 2. Instalar .NET SDK (solo si el proyecto es .NET)
      - name: üß∞ Install .NET SDK
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x'

      # 3. --- Instalar Checkov ---
      - name: üîß Install Checkov
        run: |
          curl -sSL https://install.python-poetry.org | python3 - 
          python3 -m venv checkov-env
          source checkov-env/bin/activate
          pip install checkov

      # 4. Ejecutar Checkov (escaneo de IaC)
      - name: üîç Run Checkov - Infrastructure as Code (IaC) scan
        run: |
          # Cambia './infraestructura' a la ruta de tus archivos IaC, por ejemplo:
          checkov -d ./infraestructura -o json > checkov-report.json || true

      # 5. Subir el reporte de Checkov como artefacto
      - name: üìä Upload Checkov report as artifact
        uses: actions/upload-artifact@v2
        with:
          name: checkov-report
          path: checkov-report.json

      # 6. --- Configurar SonarCloud ---
      - name: Set up SonarCloud
        uses: sonarsource/sonarcloud-github-action@v1
        with:
          sonarcloud_token: ${{ secrets.SONAR_TOKEN }}

      # 7. Ejecutar an√°lisis de SonarCloud
      - name: üßë‚Äçüíª Build and analyze with SonarCloud
        run: |
          # Construir el proyecto y analizar con SonarCloud
          dotnet build
          dotnet sonarscanner begin /k:"${{ secrets.SONAR_PROJECT_KEY }}" /d:sonar.login=${{ secrets.SONAR_TOKEN }}
          dotnet build
          dotnet sonarscanner end /d:sonar.login=${{ secrets.SONAR_TOKEN }}
